package com.project.advertisement.controller;

import java.util.Map;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.project.advertisement.entity.Advertise;
import com.project.advertisement.entity.DummyAdvertise;
import com.project.advertisement.entity.Message;
import com.project.advertisement.entity.User;
import com.project.advertisement.service.AdService;
import com.project.advertisement.service.UserService;


@RestController
@RequestMapping("/")
public class AdvProjectController {
	
	@Autowired
	UserService userService;
	
	@Autowired
	AdService adService;
	
	@CrossOrigin
	@RequestMapping(value="register", method=RequestMethod.POST,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String createUser(@RequestBody User  userData) throws JsonProcessingException{
		User user=new User(userData.getFirstName(),userData.getLastName(), userData.getUserName(), userData.getPassword(),userData.getEmail(), userData.getPhone());
		String str=userService.createUser(user);
		JSONObject json = new JSONObject();
	    json.put("message", str);
		return json.toString();
	}
	
	@CrossOrigin
	@RequestMapping(value="login", method=RequestMethod.POST,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String login(@RequestBody Map<String, String>  userData) throws JsonProcessingException{
		String auth_token=userService.login(userData.get("userName"), userData.get("password"));
		JSONObject json = new JSONObject();
	      json.put("auth-token", auth_token);
	      json.put("userName", userData.get("userName"));
	      return json.toString();
	}
	
	@CrossOrigin
	@RequestMapping(value="logout", method=RequestMethod.DELETE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody String logout(@RequestHeader(value="auth-token") String auth_token) throws JsonProcessingException {
		System.out.println("authToken = " + auth_token);
		String response= userService.logout(auth_token);
		JSONObject json = new JSONObject();
	    json.put("message", response);
		return json.toString();
	}
	
	@CrossOrigin
	@RequestMapping(value="categories", method=RequestMethod.GET,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String getCategories() throws JsonProcessingException{
		String str= adService.getCategories();
		return str;
	}
	
	
	@RequestMapping(value="actions", method=RequestMethod.GET,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String getActions() throws JsonProcessingException{
		String str= adService.getActions();
		return str;
	}
	
	
	@CrossOrigin
	@RequestMapping(value="postAd", method=RequestMethod.POST,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String postAd(@RequestBody DummyAdvertise  ad,
			@RequestHeader(value="auth-token") String auth_token) {
		DummyAdvertise adToPost=new DummyAdvertise(ad.getTitle(),ad.getName(), ad.getCategory(), ad.getDescription() );
		String res= adService.postAd(adToPost, auth_token);
		JSONObject json = new JSONObject();
	    json.put("Status",res);
	    return json.toString();
	}
	
	@CrossOrigin
	@RequestMapping(value="postAd", method=RequestMethod.PUT,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String updateAd(@RequestBody Advertise  ad,
			@RequestHeader(value="auth-token") String auth_token) {
		Advertise adToPost=new Advertise(ad.getId(),ad.getTitle(),ad.getName(), ad.getCategory(), ad.getDescription() );
		String res= adService.updateAd(adToPost, auth_token);
		JSONObject json = new JSONObject();
	    json.put("Status",res);
	    return json.toString();
	}
	
	@CrossOrigin
	@RequestMapping(value="posts", method=RequestMethod.GET,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String getUserAds(@RequestHeader(value="auth-token") String authToken) {
	    return adService.getUserAds(authToken);
	}
	
	@CrossOrigin
	@RequestMapping(value="post", method=RequestMethod.GET,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String getUserAd(@RequestHeader(value="auth-token") String authToken,
			@RequestParam(value="postId") String postId) {

		return adService.getUserAd(authToken, Integer.parseInt(postId));
	}
	
	@CrossOrigin
	@RequestMapping(value="post", method=RequestMethod.DELETE,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String deleteUserAd(@RequestHeader(value="auth-token") String authToken,
			@RequestParam(value="postId") String postId) {

		return adService.deleteUserAd(authToken, Integer.parseInt(postId));
	}
	
	@CrossOrigin
	@RequestMapping(value="user", method=RequestMethod.GET,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String getUserDetails(@RequestHeader(value="auth-token") String authToken) {

		return userService.getUserDetails(authToken);
	}
	
	@CrossOrigin
	@RequestMapping(value="viewAd", method=RequestMethod.GET,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String getAdDetail(@RequestHeader(value="auth-token") String authToken,
			@RequestParam(value="postId") String postId) {

		return adService.getAdDetail(authToken, Integer.parseInt(postId));
	}
	
	@CrossOrigin
	@RequestMapping(value="posts/search/text", method=RequestMethod.GET,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String searchByText(@RequestHeader(value="auth-token") String authToken,
			@RequestParam(value="searchText") String searchText) {

		return adService.searchByText(authToken, searchText);
	}
	
	@CrossOrigin
	@RequestMapping(value="posts/search", method=RequestMethod.GET,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String search(@RequestHeader(value="auth-token") String authToken,
			@RequestParam Map<String, String>  searchCriteria) {
		System.out.println(searchCriteria);
		return adService.search(authToken, searchCriteria.get("searchText"), searchCriteria.get("category"));
	}
	
	@CrossOrigin
	@RequestMapping(value="messag", method=RequestMethod.POST,
			consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody String sendMessage(@RequestBody Message  message,
			@RequestHeader(value="auth-token") String auth_token) {
		String res= adService.postAd(adToPost, auth_token);
		JSONObject json = new JSONObject();
	    json.put("Status",res);
	    return json.toString();
	}
}
